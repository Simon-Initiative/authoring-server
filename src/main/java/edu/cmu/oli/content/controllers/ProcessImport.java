/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018. Carnegie Mellon University
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package edu.cmu.oli.content.controllers;

import edu.cmu.oli.content.ContentServiceException;
import edu.cmu.oli.content.DirectoryUtils;
import edu.cmu.oli.content.boundary.endpoints.ContentPackageResource;
import edu.cmu.oli.content.configuration.ConfigurationCache;
import edu.cmu.oli.content.configuration.Configurations;
import edu.cmu.oli.content.contentfiles.readers.XmlToContentPackage;
import edu.cmu.oli.content.logging.Logging;
import edu.cmu.oli.content.models.persistance.entities.BuildStatus;
import edu.cmu.oli.content.models.persistance.entities.ContentPackage;
import edu.cmu.oli.content.security.AppSecurityController;
import edu.cmu.oli.content.security.Scopes;
import edu.cmu.oli.content.security.Secure;
import org.jboss.ejb3.annotation.TransactionTimeout;
import org.slf4j.Logger;

import javax.ejb.Stateless;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * @author Raphael Gachuhi
 */
@Stateless
@TransactionTimeout(value = 50L, unit = TimeUnit.MINUTES)
public class ProcessImport {

    @Inject
    @Logging
    Logger log;

    @PersistenceContext
    EntityManager em;

    @Inject
    EdgesController edgesController;

    @Inject
    DirectoryUtils directoryUtils;

    @Inject
    @Secure
    AppSecurityController auth;

    @Inject
    @ConfigurationCache
    Instance<Configurations> config;

    @Inject
    @Secure
    AppSecurityController securityManager;

    @Inject
    XmlToContentPackage xmlToContentPackage;

    public void processPackage(ContentPackage newContentPackage, Path targetDir, String preferredUsername, String shallowId) throws ContentServiceException {
        try {

            em.persist(newContentPackage);
            // flush to get autogenerated guid
            em.flush();

            securityManager.createResource(newContentPackage.getGuid(), "/packages/" + newContentPackage.getGuid(),
                    ContentPackageResource.resourceType,
                    Arrays.asList(Scopes.VIEW_MATERIAL_ACTION, Scopes.EDIT_MATERIAL_ACTION));

            Path pkgXml = targetDir.resolve("content/package.xml");

            String sourceLocation = this.config.get().getContentSourceXml();

            Path sourceDir = Paths.get(sourceLocation + File.separator + "template/tools/oli");
            if (sourceDir.toFile().exists()) {
                directoryUtils.copyFilesEndingWith(sourceDir, targetDir.resolve("tools/oli"), ".jar");
            }

            try {
                xmlToContentPackage.setContentPackage(newContentPackage);
                xmlToContentPackage.processPackage(targetDir, pkgXml);
                xmlToContentPackage.walkContentFolder(targetDir);
                xmlToContentPackage.parseContent(targetDir);
                xmlToContentPackage.finalizePackageImport();
                newContentPackage.setBuildStatus(BuildStatus.READY);

                em.merge(newContentPackage);
                em.flush();

                Map<String, List<String>> userPermission = new HashMap<>();
                userPermission.put(newContentPackage.getGuid(), Arrays.asList(Scopes.VIEW_MATERIAL_ACTION.toString(),
                        Scopes.EDIT_MATERIAL_ACTION.toString(), "ContentPackage", newContentPackage.getTitle()));
                securityManager.updateUserAttributes(preferredUsername, userPermission, null);
                edgesController.validateAllEdges(newContentPackage);

            } catch (Throwable e) {
                final String message = "Error while processing course content package import " + targetDir.toString();
                log.error(message, e);
                if (xmlToContentPackage != null && newContentPackage != null) {
                    newContentPackage.setBuildStatus(BuildStatus.FAILED);
                    em.merge(newContentPackage);
                }
                throw new ContentServiceException(e.getMessage(), e);
            }
        } finally {
            SVNImportController.importPending.remove(shallowId);
        }
    }
}
